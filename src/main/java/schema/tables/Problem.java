/*
 * This file is generated by jOOQ.
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import schema.Indexes;
import schema.Keys;
import schema.Webapp;
import schema.tables.records.ProblemRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Problem extends TableImpl<ProblemRecord> {

    private static final long serialVersionUID = 1744662811;

    /**
     * The reference instance of <code>webapp.problem</code>
     */
    public static final Problem PROBLEM = new Problem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProblemRecord> getRecordType() {
        return ProblemRecord.class;
    }

    /**
     * The column <code>webapp.problem.id</code>.
     */
    public final TableField<ProblemRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>webapp.problem.name</code>.
     */
    public final TableField<ProblemRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>webapp.problem.priority</code>.
     */
    public final TableField<ProblemRecord, Integer> PRIORITY = createField(DSL.name("priority"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.problem.working_type</code>.
     */
    public final TableField<ProblemRecord, String> WORKING_TYPE = createField(DSL.name("working_type"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>webapp.problem.execution_time</code>.
     */
    public final TableField<ProblemRecord, Integer> EXECUTION_TIME = createField(DSL.name("execution_time"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>webapp.problem</code> table reference
     */
    public Problem() {
        this(DSL.name("problem"), null);
    }

    /**
     * Create an aliased <code>webapp.problem</code> table reference
     */
    public Problem(String alias) {
        this(DSL.name(alias), PROBLEM);
    }

    /**
     * Create an aliased <code>webapp.problem</code> table reference
     */
    public Problem(Name alias) {
        this(alias, PROBLEM);
    }

    private Problem(Name alias, Table<ProblemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Problem(Name alias, Table<ProblemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Problem(Table<O> child, ForeignKey<O, ProblemRecord> key) {
        super(child, key, PROBLEM);
    }

    @Override
    public Schema getSchema() {
        return Webapp.WEBAPP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROBLEM_PRIMARY);
    }

    @Override
    public Identity<ProblemRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROBLEM;
    }

    @Override
    public UniqueKey<ProblemRecord> getPrimaryKey() {
        return Keys.KEY_PROBLEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProblemRecord>> getKeys() {
        return Arrays.<UniqueKey<ProblemRecord>>asList(Keys.KEY_PROBLEM_PRIMARY);
    }

    @Override
    public Problem as(String alias) {
        return new Problem(DSL.name(alias), this);
    }

    @Override
    public Problem as(Name alias) {
        return new Problem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Problem rename(String name) {
        return new Problem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Problem rename(Name name) {
        return new Problem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
