/*
 * This file is generated by jOOQ.
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import schema.Indexes;
import schema.Keys;
import schema.Webapp;
import schema.tables.records.RoomFacilitiesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoomFacilities extends TableImpl<RoomFacilitiesRecord> {

    private static final long serialVersionUID = 1918041098;

    /**
     * The reference instance of <code>webapp.room_facilities</code>
     */
    public static final RoomFacilities ROOM_FACILITIES = new RoomFacilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoomFacilitiesRecord> getRecordType() {
        return RoomFacilitiesRecord.class;
    }

    /**
     * The column <code>webapp.room_facilities.room_id</code>.
     */
    public final TableField<RoomFacilitiesRecord, Integer> ROOM_ID = createField(DSL.name("room_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.room_facilities.facilities_id</code>.
     */
    public final TableField<RoomFacilitiesRecord, Integer> FACILITIES_ID = createField(DSL.name("facilities_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>webapp.room_facilities</code> table reference
     */
    public RoomFacilities() {
        this(DSL.name("room_facilities"), null);
    }

    /**
     * Create an aliased <code>webapp.room_facilities</code> table reference
     */
    public RoomFacilities(String alias) {
        this(DSL.name(alias), ROOM_FACILITIES);
    }

    /**
     * Create an aliased <code>webapp.room_facilities</code> table reference
     */
    public RoomFacilities(Name alias) {
        this(alias, ROOM_FACILITIES);
    }

    private RoomFacilities(Name alias, Table<RoomFacilitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoomFacilities(Name alias, Table<RoomFacilitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RoomFacilities(Table<O> child, ForeignKey<O, RoomFacilitiesRecord> key) {
        super(child, key, ROOM_FACILITIES);
    }

    @Override
    public Schema getSchema() {
        return Webapp.WEBAPP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROOM_FACILITIES_FACILITIES_ID, Indexes.ROOM_FACILITIES_PRIMARY);
    }

    @Override
    public UniqueKey<RoomFacilitiesRecord> getPrimaryKey() {
        return Keys.KEY_ROOM_FACILITIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<RoomFacilitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<RoomFacilitiesRecord>>asList(Keys.KEY_ROOM_FACILITIES_PRIMARY);
    }

    @Override
    public List<ForeignKey<RoomFacilitiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoomFacilitiesRecord, ?>>asList(Keys.ROOM_FACILITIES_IBFK_1, Keys.ROOM_FACILITIES_IBFK_2);
    }

    public Room room() {
        return new Room(this, Keys.ROOM_FACILITIES_IBFK_1);
    }

    public Facilities facilities() {
        return new Facilities(this, Keys.ROOM_FACILITIES_IBFK_2);
    }

    @Override
    public RoomFacilities as(String alias) {
        return new RoomFacilities(DSL.name(alias), this);
    }

    @Override
    public RoomFacilities as(Name alias) {
        return new RoomFacilities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoomFacilities rename(String name) {
        return new RoomFacilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoomFacilities rename(Name name) {
        return new RoomFacilities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
