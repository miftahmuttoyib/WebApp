/*
 * This file is generated by jOOQ.
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import schema.Indexes;
import schema.Keys;
import schema.Webapp;
import schema.tables.records.ComplaintTeamRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComplaintTeam extends TableImpl<ComplaintTeamRecord> {

    private static final long serialVersionUID = 2098142937;

    /**
     * The reference instance of <code>webapp.complaint_team</code>
     */
    public static final ComplaintTeam COMPLAINT_TEAM = new ComplaintTeam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComplaintTeamRecord> getRecordType() {
        return ComplaintTeamRecord.class;
    }

    /**
     * The column <code>webapp.complaint_team.complaint_id</code>.
     */
    public final TableField<ComplaintTeamRecord, Integer> COMPLAINT_ID = createField(DSL.name("complaint_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.complaint_team.technician_id</code>.
     */
    public final TableField<ComplaintTeamRecord, Integer> TECHNICIAN_ID = createField(DSL.name("technician_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>webapp.complaint_team</code> table reference
     */
    public ComplaintTeam() {
        this(DSL.name("complaint_team"), null);
    }

    /**
     * Create an aliased <code>webapp.complaint_team</code> table reference
     */
    public ComplaintTeam(String alias) {
        this(DSL.name(alias), COMPLAINT_TEAM);
    }

    /**
     * Create an aliased <code>webapp.complaint_team</code> table reference
     */
    public ComplaintTeam(Name alias) {
        this(alias, COMPLAINT_TEAM);
    }

    private ComplaintTeam(Name alias, Table<ComplaintTeamRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComplaintTeam(Name alias, Table<ComplaintTeamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ComplaintTeam(Table<O> child, ForeignKey<O, ComplaintTeamRecord> key) {
        super(child, key, COMPLAINT_TEAM);
    }

    @Override
    public Schema getSchema() {
        return Webapp.WEBAPP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPLAINT_TEAM_PRIMARY, Indexes.COMPLAINT_TEAM_TECHNICIAN_ID);
    }

    @Override
    public UniqueKey<ComplaintTeamRecord> getPrimaryKey() {
        return Keys.KEY_COMPLAINT_TEAM_PRIMARY;
    }

    @Override
    public List<UniqueKey<ComplaintTeamRecord>> getKeys() {
        return Arrays.<UniqueKey<ComplaintTeamRecord>>asList(Keys.KEY_COMPLAINT_TEAM_PRIMARY);
    }

    @Override
    public List<ForeignKey<ComplaintTeamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ComplaintTeamRecord, ?>>asList(Keys.COMPLAINT_TEAM_IBFK_1, Keys.COMPLAINT_TEAM_IBFK_2);
    }

    public Complaint complaint() {
        return new Complaint(this, Keys.COMPLAINT_TEAM_IBFK_1);
    }

    public Technician technician() {
        return new Technician(this, Keys.COMPLAINT_TEAM_IBFK_2);
    }

    @Override
    public ComplaintTeam as(String alias) {
        return new ComplaintTeam(DSL.name(alias), this);
    }

    @Override
    public ComplaintTeam as(Name alias) {
        return new ComplaintTeam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComplaintTeam rename(String name) {
        return new ComplaintTeam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComplaintTeam rename(Name name) {
        return new ComplaintTeam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
