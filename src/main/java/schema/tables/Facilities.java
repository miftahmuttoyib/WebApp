/*
 * This file is generated by jOOQ.
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import schema.Indexes;
import schema.Keys;
import schema.Webapp;
import schema.tables.records.FacilitiesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Facilities extends TableImpl<FacilitiesRecord> {

    private static final long serialVersionUID = -227728243;

    /**
     * The reference instance of <code>webapp.facilities</code>
     */
    public static final Facilities FACILITIES = new Facilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FacilitiesRecord> getRecordType() {
        return FacilitiesRecord.class;
    }

    /**
     * The column <code>webapp.facilities.id</code>.
     */
    public final TableField<FacilitiesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>webapp.facilities.name</code>.
     */
    public final TableField<FacilitiesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>webapp.facilities.facilities_type</code>.
     */
    public final TableField<FacilitiesRecord, String> FACILITIES_TYPE = createField(DSL.name("facilities_type"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * Create a <code>webapp.facilities</code> table reference
     */
    public Facilities() {
        this(DSL.name("facilities"), null);
    }

    /**
     * Create an aliased <code>webapp.facilities</code> table reference
     */
    public Facilities(String alias) {
        this(DSL.name(alias), FACILITIES);
    }

    /**
     * Create an aliased <code>webapp.facilities</code> table reference
     */
    public Facilities(Name alias) {
        this(alias, FACILITIES);
    }

    private Facilities(Name alias, Table<FacilitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Facilities(Name alias, Table<FacilitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Facilities(Table<O> child, ForeignKey<O, FacilitiesRecord> key) {
        super(child, key, FACILITIES);
    }

    @Override
    public Schema getSchema() {
        return Webapp.WEBAPP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FACILITIES_PRIMARY);
    }

    @Override
    public Identity<FacilitiesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FACILITIES;
    }

    @Override
    public UniqueKey<FacilitiesRecord> getPrimaryKey() {
        return Keys.KEY_FACILITIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<FacilitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<FacilitiesRecord>>asList(Keys.KEY_FACILITIES_PRIMARY);
    }

    @Override
    public Facilities as(String alias) {
        return new Facilities(DSL.name(alias), this);
    }

    @Override
    public Facilities as(Name alias) {
        return new Facilities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Facilities rename(String name) {
        return new Facilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Facilities rename(Name name) {
        return new Facilities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
