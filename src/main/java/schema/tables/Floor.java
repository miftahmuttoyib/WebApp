/*
 * This file is generated by jOOQ.
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import schema.Indexes;
import schema.Keys;
import schema.Webapp;
import schema.tables.records.FloorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Floor extends TableImpl<FloorRecord> {

    private static final long serialVersionUID = 1561546068;

    /**
     * The reference instance of <code>webapp.floor</code>
     */
    public static final Floor FLOOR = new Floor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FloorRecord> getRecordType() {
        return FloorRecord.class;
    }

    /**
     * The column <code>webapp.floor.id</code>.
     */
    public final TableField<FloorRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>webapp.floor.name</code>.
     */
    public final TableField<FloorRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>webapp.floor.code</code>.
     */
    public final TableField<FloorRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * Create a <code>webapp.floor</code> table reference
     */
    public Floor() {
        this(DSL.name("floor"), null);
    }

    /**
     * Create an aliased <code>webapp.floor</code> table reference
     */
    public Floor(String alias) {
        this(DSL.name(alias), FLOOR);
    }

    /**
     * Create an aliased <code>webapp.floor</code> table reference
     */
    public Floor(Name alias) {
        this(alias, FLOOR);
    }

    private Floor(Name alias, Table<FloorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Floor(Name alias, Table<FloorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Floor(Table<O> child, ForeignKey<O, FloorRecord> key) {
        super(child, key, FLOOR);
    }

    @Override
    public Schema getSchema() {
        return Webapp.WEBAPP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FLOOR_CODE_UNIQUE, Indexes.FLOOR_PRIMARY);
    }

    @Override
    public Identity<FloorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FLOOR;
    }

    @Override
    public UniqueKey<FloorRecord> getPrimaryKey() {
        return Keys.KEY_FLOOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<FloorRecord>> getKeys() {
        return Arrays.<UniqueKey<FloorRecord>>asList(Keys.KEY_FLOOR_PRIMARY, Keys.KEY_FLOOR_CODE_UNIQUE);
    }

    @Override
    public Floor as(String alias) {
        return new Floor(DSL.name(alias), this);
    }

    @Override
    public Floor as(Name alias) {
        return new Floor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Floor rename(String name) {
        return new Floor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Floor rename(Name name) {
        return new Floor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
