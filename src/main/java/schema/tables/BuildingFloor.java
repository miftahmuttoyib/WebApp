/*
 * This file is generated by jOOQ.
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import schema.Indexes;
import schema.Keys;
import schema.Webapp;
import schema.tables.records.BuildingFloorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BuildingFloor extends TableImpl<BuildingFloorRecord> {

    private static final long serialVersionUID = -1591569583;

    /**
     * The reference instance of <code>webapp.building_floor</code>
     */
    public static final BuildingFloor BUILDING_FLOOR = new BuildingFloor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuildingFloorRecord> getRecordType() {
        return BuildingFloorRecord.class;
    }

    /**
     * The column <code>webapp.building_floor.building_id</code>.
     */
    public final TableField<BuildingFloorRecord, Integer> BUILDING_ID = createField(DSL.name("building_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.building_floor.floor_id</code>.
     */
    public final TableField<BuildingFloorRecord, Integer> FLOOR_ID = createField(DSL.name("floor_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>webapp.building_floor</code> table reference
     */
    public BuildingFloor() {
        this(DSL.name("building_floor"), null);
    }

    /**
     * Create an aliased <code>webapp.building_floor</code> table reference
     */
    public BuildingFloor(String alias) {
        this(DSL.name(alias), BUILDING_FLOOR);
    }

    /**
     * Create an aliased <code>webapp.building_floor</code> table reference
     */
    public BuildingFloor(Name alias) {
        this(alias, BUILDING_FLOOR);
    }

    private BuildingFloor(Name alias, Table<BuildingFloorRecord> aliased) {
        this(alias, aliased, null);
    }

    private BuildingFloor(Name alias, Table<BuildingFloorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BuildingFloor(Table<O> child, ForeignKey<O, BuildingFloorRecord> key) {
        super(child, key, BUILDING_FLOOR);
    }

    @Override
    public Schema getSchema() {
        return Webapp.WEBAPP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BUILDING_FLOOR_FLOOR_ID, Indexes.BUILDING_FLOOR_PRIMARY);
    }

    @Override
    public UniqueKey<BuildingFloorRecord> getPrimaryKey() {
        return Keys.KEY_BUILDING_FLOOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<BuildingFloorRecord>> getKeys() {
        return Arrays.<UniqueKey<BuildingFloorRecord>>asList(Keys.KEY_BUILDING_FLOOR_PRIMARY);
    }

    @Override
    public List<ForeignKey<BuildingFloorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BuildingFloorRecord, ?>>asList(Keys.BUILDING_FLOOR_IBFK_1, Keys.BUILDING_FLOOR_IBFK_2);
    }

    public Building building() {
        return new Building(this, Keys.BUILDING_FLOOR_IBFK_1);
    }

    public Floor floor() {
        return new Floor(this, Keys.BUILDING_FLOOR_IBFK_2);
    }

    @Override
    public BuildingFloor as(String alias) {
        return new BuildingFloor(DSL.name(alias), this);
    }

    @Override
    public BuildingFloor as(Name alias) {
        return new BuildingFloor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BuildingFloor rename(String name) {
        return new BuildingFloor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BuildingFloor rename(Name name) {
        return new BuildingFloor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
