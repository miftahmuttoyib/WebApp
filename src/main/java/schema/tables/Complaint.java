/*
 * This file is generated by jOOQ.
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import schema.Indexes;
import schema.Keys;
import schema.Webapp;
import schema.tables.records.ComplaintRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Complaint extends TableImpl<ComplaintRecord> {

    private static final long serialVersionUID = 343568700;

    /**
     * The reference instance of <code>webapp.complaint</code>
     */
    public static final Complaint COMPLAINT = new Complaint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComplaintRecord> getRecordType() {
        return ComplaintRecord.class;
    }

    /**
     * The column <code>webapp.complaint.id</code>.
     */
    public final TableField<ComplaintRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>webapp.complaint.user_id</code>.
     */
    public final TableField<ComplaintRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.complaint.apartment_id</code>.
     */
    public final TableField<ComplaintRecord, Integer> APARTMENT_ID = createField(DSL.name("apartment_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.complaint.problem_id</code>.
     */
    public final TableField<ComplaintRecord, Integer> PROBLEM_ID = createField(DSL.name("problem_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.complaint.facilities_id</code>.
     */
    public final TableField<ComplaintRecord, Integer> FACILITIES_ID = createField(DSL.name("facilities_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.complaint.room_id</code>.
     */
    public final TableField<ComplaintRecord, Integer> ROOM_ID = createField(DSL.name("room_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.complaint.status_no</code>.
     */
    public final TableField<ComplaintRecord, Integer> STATUS_NO = createField(DSL.name("status_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>webapp.complaint.create_date</code>.
     */
    public final TableField<ComplaintRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>webapp.complaint</code> table reference
     */
    public Complaint() {
        this(DSL.name("complaint"), null);
    }

    /**
     * Create an aliased <code>webapp.complaint</code> table reference
     */
    public Complaint(String alias) {
        this(DSL.name(alias), COMPLAINT);
    }

    /**
     * Create an aliased <code>webapp.complaint</code> table reference
     */
    public Complaint(Name alias) {
        this(alias, COMPLAINT);
    }

    private Complaint(Name alias, Table<ComplaintRecord> aliased) {
        this(alias, aliased, null);
    }

    private Complaint(Name alias, Table<ComplaintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Complaint(Table<O> child, ForeignKey<O, ComplaintRecord> key) {
        super(child, key, COMPLAINT);
    }

    @Override
    public Schema getSchema() {
        return Webapp.WEBAPP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPLAINT_COMPLAINT_IBFK_2_IDX, Indexes.COMPLAINT_FACILITIES_ID, Indexes.COMPLAINT_PRIMARY, Indexes.COMPLAINT_PROBLEM_ID, Indexes.COMPLAINT_ROOM_ID, Indexes.COMPLAINT_USER_ID);
    }

    @Override
    public Identity<ComplaintRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPLAINT;
    }

    @Override
    public UniqueKey<ComplaintRecord> getPrimaryKey() {
        return Keys.KEY_COMPLAINT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ComplaintRecord>> getKeys() {
        return Arrays.<UniqueKey<ComplaintRecord>>asList(Keys.KEY_COMPLAINT_PRIMARY);
    }

    @Override
    public List<ForeignKey<ComplaintRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ComplaintRecord, ?>>asList(Keys.COMPLAINT_IBFK_1, Keys.COMPLAINT_IBFK_2, Keys.COMPLAINT_IBFK_3, Keys.COMPLAINT_IBFK_4, Keys.COMPLAINT_IBFK_5);
    }

    public User user() {
        return new User(this, Keys.COMPLAINT_IBFK_1);
    }

    public Apartment apartment() {
        return new Apartment(this, Keys.COMPLAINT_IBFK_2);
    }

    public Problem problem() {
        return new Problem(this, Keys.COMPLAINT_IBFK_3);
    }

    public Facilities facilities() {
        return new Facilities(this, Keys.COMPLAINT_IBFK_4);
    }

    public Room room() {
        return new Room(this, Keys.COMPLAINT_IBFK_5);
    }

    @Override
    public Complaint as(String alias) {
        return new Complaint(DSL.name(alias), this);
    }

    @Override
    public Complaint as(Name alias) {
        return new Complaint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaint rename(String name) {
        return new Complaint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaint rename(Name name) {
        return new Complaint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
